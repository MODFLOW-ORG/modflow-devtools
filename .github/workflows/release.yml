name: Release
on:
  # workflow_call trigger lets this be called from other workflows.
  # note this workflow may be called multiple times in a release,
  # first to trigger the distribution build, then to draft the PR
  # to trunk, then publish the package, reinitialize develop, etc.
  workflow_call:
    inputs:
      branch:
        description: Branch to release from.
        required: true
        type: string
      cliff_config:
        description: Path of the git-cliff config file relative to the project root.
        required: false
        default: cliff.toml
        type: string
      cumulative_changelog:
        description: Path of the cumulative changelog file relative to the project root.
        required: false
        default: HISTORY.md
        type: string
      draft_release:
        description: Draft a release post with assets and changelog.
        required: false
        default: true
        type: boolean
      package_name:
        # currently assumes module dir is in project root,
        # and module name is the same as package name with
        # hyphens swapped for underscores
        description: Name of the Python package to release.
        required: true
        type: string
      publish_package:
        description: Publish the package to PyPI.
        required: false
        default: true
        type: boolean
      python:
        description: Python version to build the package with.
        required: false
        default: '3.8'
        type: string
      reset_develop:
        description: Reset the develop branch from the trunk.
        required: false
        default: true
        type: boolean
      run_tests:
        # currently assumes tests are in autotest/
        description: Run tests after building binaries.
        required: false
        type: boolean
        default: true
      trunk_branch:
        description: Name of the trunk branch (e.g. 'main' or 'master').
        required: false
        default: main
        type: string
      version:
        description: Version number to use for release.
        required: true
        type: string
jobs:
  make_dist:
    name: Make distribution
    if: github.event_name != 'workflow_dispatch' && github.ref_name != inputs.trunk_branch
    uses: ./.github/workflows/make_package.yml
    with:
      branch: ${{ inputs.branch }}
      cliff_config: ${{ inputs.cliff_config }}
      cumulative_changelog: ${{ inputs.cumulative_changelog }}
      package_name: ${{ inputs.package_name }}
      python: ${{ inputs.python }}
      run_tests: ${{ inputs.run_tests }}
      trunk_branch: ${{ inputs.trunk_branch }}
      version: ${{ inputs.version }}

  release_pr:
    name: Draft release PR
    if: github.event_name != 'workflow_dispatch' && !contains(github.ref_name, 'rc')
    needs:
      - make_dist
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    steps:

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          # use repository_owner to allow testing on a fork
          repository: ${{ github.repository_owner }}/modflow-devtools
          ref: ${{ github.ref }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python }}

      - name: Install Python build/test dependencies
        run: |
          pip install --upgrade pip
          pip install black filelock

      - name: Update version
        id: version
        run: |
          ref="${{ github.ref_name }}"
          version="${ref#"v"}"
          package="${{ inputs.package_name }}"
          # assume module name is the same as package
          # name with hyphens swapped for underscores
          module="${package//-/_}"
          python scripts/update_version.py -v "$version"
          black -v $module/version.py
          python -c "import $module; print('Version: ', $module.__version__)"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Commit & push changes
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          git config core.sharedRepository true
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "ci(release): version ${{ inputs.version }}"
          git push origin "${{ github.ref_name }}"

      # actions/download-artifact won't look at previous workflow runs but we need to in order to get changelog
      - name: Download artifacts
        uses: dawidd6/action-download-artifact@v2

      - name: Create release PR
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          ver="${{ inputs.version }}"
          changelog=$(cat CHANGELOG.md)

          title="Release $ver"
          trunk="${{ inputs.trunk_branch }}"
          body='
          # Release '$ver'
          
          The release can be approved by merging this pull request into `$trunk`. This will trigger jobs to publish the release to PyPI and reset `develop` from `$trunk`.
          
          ## Changelog
          
          '$changelog'
          '
          gh pr create -B "$trunk" -H "${{ github.ref_name }}" --title "$title" --draft --body "$body"

  release:
    name: Draft release
    needs: 
      - make_dist
    # runs only when changes are merged to trunk
    if: github.event_name == 'push' && github.ref_name == inputs.trunk_branch && (inputs.draft_release == '' || inputs.draft_release == true)
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    steps:

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          # use repository_owner to allow testing on a fork
          repository: ${{ github.repository_owner }}/modflow-devtools
          ref: ${{ inputs.trunk_branch }}

      # actions/download-artifact won't look at previous workflow runs but we need to in order to get changelog
      - name: Download artifacts
        uses: dawidd6/action-download-artifact@v2

      - name: Draft release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          version=$(cat version.txt)
          title="${{ inputs.package_name }} $version"
          notes=$(cat "changelog/CHANGELOG_$version.md" | grep -v "### Version $version")
          gh release create "$version" \
            --target ${{ inputs.trunk_branch }} \
            --title "$title" \
            --notes "$notes" \
            --draft \
            --latest

  publish:
    name: Publish package
    needs:
      - make_dist
      - release
    # runs only after release is published (manually promoted from draft)
    if: github.event_name == 'release' && (inputs.publish_package == '' || inputs.publish_package == true)
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
      id-token: write  # mandatory for trusted publishing
    environment:  # requires a 'pypi' environment in repo settings
      name: pypi
      url: https://pypi.org/p/${{ inputs.package_name }}
    steps:

      - name: Checkout trunk
        uses: actions/checkout@v3
        with:
           # use repository_owner to allow testing on a fork
          repository: ${{ github.repository_owner }}/modflow-devtools
          ref: ${{ inputs.trunk_branch }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python }}

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install twine
      
      - name: Check package
        run: twine check --strict dist/*

      - name: Publish package
        run: twine upload dist/*
  
  reset_pr:
    name: Draft reset PR
    needs:
      - make_dist
      - release
    if: github.event_name == 'release' && (inputs.reset_develop == '' || inputs.reset_develop == true)
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    steps:

      - name: Checkout trunk branch
        uses: actions/checkout@v3
        with:
          # use repository_owner to allow testing on a fork
          repository: ${{ github.repository_owner }}/modflow-devtools
          ref: ${{ inputs.trunk_branch }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install black filelock

      - name: Get release tag
        uses: oprypin/find-latest-tag@v1
        id: latest_tag
        with:
          repository: ${{ github.repository }}
          releases-only: true

      - name: Draft pull request
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # create reset branch from trunk
          reset_branch="post-release-${{ steps.latest_tag.outputs.tag }}-reset"
          git switch -c $reset_branch

          # update version (add + to version.txt to indicate development status)
          package=${{ inputs.package_name }}
          module=${package//-/_}
          version=$(python update_version.py -g)
          python scripts/update_version.py -v "$version+"
          black -v $module/version.py

          # commit and push reset branch
          trunk=${{ inputs.trunk_branch }}
          git config core.sharedRepository true
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "ci(post-release): update develop from $trunk"
          git push -u origin $reset_branch

          # create PR into develop
          body='
          # Reinitialize for development

          Updates the `develop` branch from `$trunk` following a successful release.
          '
          gh pr create -B "develop" -H "$reset_branch" --title "Reinitialize develop branch" --draft --body "$body"